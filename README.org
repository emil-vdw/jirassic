* Jirassic: A Jira Client for Emacs

Jirassic is an Emacs package that provides a convenient interface for interacting with Jira's REST API. It allows you to create, update, delete, and retrieve Jira issues directly from Emacs, with optional integration into Org Mode.

* Features
+ Serialize Jira issues into Org Mode entries.
+ Optional integration with ~org-roam~ for enhanced note-taking workflows.

* Installation

** Using ~use-package~ and ~elpaca~
#+begin_src emacs-lisp
  (use-package jirassic
    :ensure (:type git :host github :repo "emil-vdw/jirassic")
    :custom
    ;; Set your Jira host URL here
    (jirassic-host "https://your-subdomain.atlassian.net/"))
#+end_src

** Credentials
Jirassic uses Emacs' built-in ~auth-source~ library to securely manage your Jira credentials. Follow the steps below to configure your credentials.

*** Linux using ~authinfo~
1. *Locate or Create Your Auth Source File*
   On Linux, the default auth source file is typically located at `~/.authinfo` or `~/.authinfo.gpg`. If it doesn't exist, you can create one.

2. *Add Your Jira Credentials*
   Add an entry for your Jira instance in the auth source file. Replace ~host.atlassian.net~, ~<user-email>~, and ~<api-key>~ with your Jira host, email, and API key, respectively.

   #+BEGIN_SRC text
     machine host.atlassian.net login <user-email> password <api-key>
   #+END_SRC


3. *Verify Permissions*
   Ensure your auth source file has the correct permissions to prevent unauthorized access. For example:

   #+BEGIN_SRC shell
     chmod 600 ~/.authinfo
   #+END_SRC

4. *Test Your Configuration*
   After setting up your credentials, test the configuration by calling a Jirassic function, such as:

   #+BEGIN_SRC emacs-lisp
     (jirassic-get-issue "ISSUE-123")
   #+END_SRC

If everything is configured correctly, Jirassic will use the credentials from your auth source file to authenticate with Jira.


*** Using Keychain on macOS
~auth-source~ can directly query the macOS Keychain for credentials. To add Jira credentials to the Keychain:
+ Open the Keychain Access application.
+ Create a new password entry with the following details:
  - *Key*: The Jira host (e.g., ~host.atlassian.net~).
  - *Account*: Your Jira email address.
  - *Password*: Your Jira API key.

* Usage
** Inserting issues
You can use the function ~jirassic-org-insert-issue~ to insert a Jira issue into an Org buffer at the current point. This function fetches the issue details from Jira and inserts them as a structured Org entry. It stores the point and buffer where it was called from and makes the API call asynchronously, allowing you to continue working in Emacs while the issue is being fetched (normally the response is instant though).

When called interactively, it prompts you for the issue key. You can also set a prefix arg to specify the level the entry must be at (defaults to the current level if not specified, i.e. ~org-current-level~), for example:

~C-u 4 M-x jirassic-org-insert-issue~

will insert the issue at level 4.

*** Basic Usage
To insert an issue, call ~jirassic-org-insert-issue~ interactively or programmatically.

#+BEGIN_SRC emacs-lisp
  (jirassic-org-insert-issue "ABC-1234")
#+END_SRC

This will fetch the issue with the key ~ABC-1234~ and insert it at the current point in the Org buffer.

*** Binding to a Key
  You can bind ~jirassic-org-insert-issue~ to a key for quick access:

  #+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-c j") #'jirassic-org-insert-issue)
  #+END_SRC

*** Customizing the Insertion Level
  The function accepts an optional ~level~ argument to specify the heading level for the inserted issue. If not provided, it defaults to the current Org level.

  #+BEGIN_SRC emacs-lisp
  (jirassic-org-insert-issue "ABC-1234" 2)
  #+END_SRC

** Org capture templates
You can easily use jirassic in org capture templates to capture org tasks from Jira tickets.

Here is an example of a capture template that inserts the contents of a Jira task into the capture buffer as the contents of the capture:

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("j" "Jira task" plain
           (file+headline "~/org/test.org" "Tasks")
           nil
           :hook (lambda ()
                   (jirassic-org-insert-issue
                    (read-string "Enter issue key: ")
                    ;; Here we specify what level to insert the issue at.
                    2)))))
#+end_src


* Optional Features

* Dependencies
+ ~Emacs~ 29.3 or later
+ ~dash~ 2.0.0 or later
+ ~s~ 1.12.0 or later
+ ~org~ 9.5 or later

* License

Jirassic is licensed under the GNU General Public License v3.0. See the LICENSE file for details.
